{"ast":null,"code":"// /* \n// \t1.该文件是用于创建一个为Input组件服务的reducer，reducer的本质就是一个函数\n// \t2.reducer函数会接到两个参数，分别为：之前的状态(preState)，动作对象(action)\n// */\n// import {ST_ONE, ST_TWO, ST_THREE, ST_FOUR} from '../constant'\n// const init = 0,\n// \t  vaccintPoint1 = 0, \n// \t  vaccintPoint2 = 0, \n// \t  vaccintPoint3 = 0, \n// \t  vaccintPoint4 = 0 \n// export default function inputReducer(preState = init, action){\n// \t//从action对象中获取：type、data\n// \tconst {type,data} = action\n// \t//根据type决定如何加工数据\n// \tswitch (type) {\n// \t\tcase ST_ONE:\n// \t\t\treturn vaccintPoint1 = preState + data\n// \t\tcase ST_TWO:\n// \t\t\treturn vaccintPoint2 = preState + data\n// \t\tcase ST_THREE: \n// \t\t\treturn vaccintPoint3 = preState + data\n// \t\tcase ST_FOUR:\n// \t\t\treturn vaccintPoint4 = preState + data\n// \t\tdefault:\n// \t\t\treturn init\n// \t}\n// }\n\n/* \r\n\t1.该文件是用于创建一个为Input组件服务的reducer，reducer的本质就是一个函数\r\n\t2.reducer函数会接到两个参数，分别为：之前的状态(preState)，动作对象(action)\r\n*/\nimport { ST_ONE, ST_TWO, ST_THREE, ST_FOUR } from '../constant'; // import {STP_ONE, STP_TWO, STP_THREE, STP_FOUR} from '../constant'\n\nconst initState = {\n  lists: [{\n    count1: 0\n  }, {\n    count2: 0\n  }, {\n    count3: 0\n  }, {\n    count4: 0\n  }]\n};\nexport default function inputReducer(preState, action) {\n  //从action对象中获取：type、data\n  const {\n    type,\n    data\n  } = action;\n  const {\n    count1,\n    count2,\n    count3,\n    count4\n  } = initState.lists; // const {stockpilePoint1, stockpilePoint2, stockpilePoint3, stockpilePoint4} = data\n  //根据type决定如何加工数据\n\n  switch (type) {\n    case ST_ONE:\n      return count1 + stockpilePoint1;\n\n    case ST_TWO:\n      return count2 + stockpilePoint2;\n\n    case ST_THREE:\n      return count3 + stockpilePoint3;\n\n    case ST_FOUR:\n      return count4 + stockpilePoint4;\n\n    default:\n      return 0;\n  }\n}","map":{"version":3,"sources":["E:/code/vaccine-system/src/redux/reducers/input.js"],"names":["ST_ONE","ST_TWO","ST_THREE","ST_FOUR","initState","lists","count1","count2","count3","count4","inputReducer","preState","action","type","data","stockpilePoint1","stockpilePoint2","stockpilePoint3","stockpilePoint4"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA,SAAQA,MAAR,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,OAAlC,QAAgD,aAAhD,C,CACA;;AAEA,MAAMC,SAAS,GAAG;AACjBC,EAAAA,KAAK,EAAC,CACL;AAACC,IAAAA,MAAM,EAAC;AAAR,GADK,EAEL;AAACC,IAAAA,MAAM,EAAC;AAAR,GAFK,EAGL;AAACC,IAAAA,MAAM,EAAC;AAAR,GAHK,EAIL;AAACC,IAAAA,MAAM,EAAC;AAAR,GAJK;AADW,CAAlB;AAQA,eAAe,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,MAAhC,EAAuC;AACrD;AACA,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA;AAAN,MAAcF,MAApB;AACA,QAAM;AAACN,IAAAA,MAAD;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,MAAjB;AAAyBC,IAAAA;AAAzB,MAAmCL,SAAS,CAACC,KAAnD,CAHqD,CAIrD;AACA;;AACA,UAAQQ,IAAR;AACC,SAAKb,MAAL;AACC,aAAOM,MAAM,GAAGS,eAAhB;;AACD,SAAKd,MAAL;AACC,aAAOM,MAAM,GAAGS,eAAhB;;AACD,SAAKd,QAAL;AACC,aAAOM,MAAM,GAAGS,eAAhB;;AACD,SAAKd,OAAL;AACC,aAAOM,MAAM,GAAGS,eAAhB;;AACD;AACC,aAAO,CAAP;AAVF;AAYA","sourcesContent":["// /* \r\n// \t1.该文件是用于创建一个为Input组件服务的reducer，reducer的本质就是一个函数\r\n// \t2.reducer函数会接到两个参数，分别为：之前的状态(preState)，动作对象(action)\r\n// */\r\n// import {ST_ONE, ST_TWO, ST_THREE, ST_FOUR} from '../constant'\r\n\r\n// const init = 0,\r\n// \t  vaccintPoint1 = 0, \r\n// \t  vaccintPoint2 = 0, \r\n// \t  vaccintPoint3 = 0, \r\n// \t  vaccintPoint4 = 0 \r\n\r\n// export default function inputReducer(preState = init, action){\r\n// \t//从action对象中获取：type、data\r\n// \tconst {type,data} = action\r\n// \t//根据type决定如何加工数据\r\n// \tswitch (type) {\r\n// \t\tcase ST_ONE:\r\n// \t\t\treturn vaccintPoint1 = preState + data\r\n// \t\tcase ST_TWO:\r\n// \t\t\treturn vaccintPoint2 = preState + data\r\n// \t\tcase ST_THREE: \r\n// \t\t\treturn vaccintPoint3 = preState + data\r\n// \t\tcase ST_FOUR:\r\n// \t\t\treturn vaccintPoint4 = preState + data\r\n// \t\tdefault:\r\n// \t\t\treturn init\r\n// \t}\r\n// }\r\n\r\n\r\n\r\n/* \r\n\t1.该文件是用于创建一个为Input组件服务的reducer，reducer的本质就是一个函数\r\n\t2.reducer函数会接到两个参数，分别为：之前的状态(preState)，动作对象(action)\r\n*/\r\nimport {ST_ONE, ST_TWO, ST_THREE, ST_FOUR} from '../constant'\r\n// import {STP_ONE, STP_TWO, STP_THREE, STP_FOUR} from '../constant'\r\n\r\nconst initState = {\r\n\tlists:[\r\n\t\t{count1:0},\r\n\t\t{count2:0},\r\n\t\t{count3:0},\r\n\t\t{count4:0}\r\n\t]\r\n}\r\nexport default function inputReducer(preState, action){\r\n\t//从action对象中获取：type、data\r\n\tconst {type,data} = action\r\n\tconst {count1, count2, count3, count4} = initState.lists\r\n\t// const {stockpilePoint1, stockpilePoint2, stockpilePoint3, stockpilePoint4} = data\r\n\t//根据type决定如何加工数据\r\n\tswitch (type) {\r\n\t\tcase ST_ONE:\r\n\t\t\treturn count1 + stockpilePoint1\r\n\t\tcase ST_TWO:\r\n\t\t\treturn count2 + stockpilePoint2\r\n\t\tcase ST_THREE:\r\n\t\t\treturn count3 + stockpilePoint3\r\n\t\tcase ST_FOUR:\r\n\t\t\treturn count4 + stockpilePoint4\r\n\t\tdefault:\r\n\t\t\treturn 0\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}